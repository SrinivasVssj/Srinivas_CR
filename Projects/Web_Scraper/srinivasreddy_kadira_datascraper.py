# -*- coding: utf-8 -*-
"""SrinivasReddy_Kadira_DataScraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SrjfYoknw0XZIccVY1maFg_npSWVvstn
"""

# Commented out IPython magic to ensure Python compatibility.
# Installing the required library BeautifulSoup4 for web scraping
# %pip install beautifulsoup4

# Importing necessary libraries
import requests
from bs4 import BeautifulSoup

# Fetching webpage content and parsing HTML
# Using the requests module to get the webpage content, disabling SSL verification
response = requests.get('https://en.wikipedia.org/wiki/Atlanta#Demographics', verify=False)
# Parsing the webpage content using BeautifulSoup
soup = BeautifulSoup(response.content, 'html.parser')
# Formatting the parsed HTML
soup.prettify()

# Taking user input for demographic search, start year, and end year
demographic_category = input("Enter Demographic: ")
start_year = input("Enter Start Year: ")
end_year = input("Enter End Year: ")

# Extracting data from the 'Historical Population' table
# Selecting table rows from the census population table
historical_population_rows = soup.select('table.us-census-pop tr')
# Initializing a dictionary to store year-wise population data
population_by_year = {}
# Variables to store year and population
year = ""
population = 0

# Looping through the table rows to extract year and corresponding population
for i in range(1, len(historical_population_rows) - 1):
    # Extracting the year from the table header
    year = historical_population_rows[i].find('th').get_text().strip()[0:4]
    # Extracting population data, removing commas, and converting to an integer
    population = int(historical_population_rows[i].find('td').get_text().strip().replace(',', ''))
    # Storing the year-population data in the dictionary
    population_by_year[year] = population

# Extracting data from the 'Race and Ethnicity' table
# Selecting table cells and headers from the collapsible ethnicity table
ethnicity_data_cells = soup.select('table.wikitable.collapsible td')
ethnicity_data_headers = soup.select('table.wikitable.collapsible th')
# Dictionary to store demographic data
demographic_data = {}
# Temporary variables for demographic category and percentage
demographic_temp = ""
percentage = 0

# Looping through headers to extract years
total_columns = len(ethnicity_data_headers)
for i in range(0, total_columns - 1):
    for j in range(0, len(ethnicity_data_cells), total_columns):
        try:
            # Extracting the year value from headers
            year = ethnicity_data_headers[i+1].get_text().strip()[0:4]
            # Extracting demographic category
            demographic_temp = ethnicity_data_cells[j].get_text().strip()
            # Standardizing the 'White (Non-Hispanic)' category
            if demographic_temp == 'White (Non-Hispanic)':
                demographic_temp = 'White'
            # Extracting the percentage and cleaning the data
            percentage = ethnicity_data_cells[j+1+i].get_text().strip().replace('%', '')
            # Storing the extracted data in the dictionary
            demographic_data[f"{year}&&{demographic_temp}"] = percentage
        except:
            continue

# Function to find the closest previous available year in case of missing data
def get_closest_year(target_year, demographic_data):
    available_years = []
    for key in demographic_data.keys():
        extracted_year = key.split("&&")[0]
        available_years.append(int(extracted_year))
    available_years.sort()
    for i in range(len(available_years)):
        if available_years[i] > target_year:
            return available_years[i-1]

print("\nYearly Demographic Data\n")
print("_________________________________________________________________________________________________________\n")

# Iterating through the given range of years and displaying demographic data
for year in range(int(start_year), int(end_year) + 1, 10):
    year_to_check = year
    if f"{year}&&{demographic_category}" not in demographic_data.keys():
        year_to_check = get_closest_year(year, demographic_data)
    print(f"Year: {year} | Total Population: {population_by_year[str(year)]} | {demographic_category} Population: "
          f"{int(float(population_by_year[str(year)]) * float(demographic_data[f'{year_to_check}&&{demographic_category}']) // 100)} "
          f"| Percentage: {demographic_data[f'{year_to_check}&&{demographic_category}']}")

print("_________________________________________________________________________________________________________")

